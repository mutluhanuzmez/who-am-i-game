#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
var socketIO = require('socket.io')
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = socketIO(server);


var Player = function (game, id) {

	this.game = game;
	this.id = id;
	this.name = '';
	//position values
	this.x = Math.random() * 400 + 100;
	this.y = Math.random() * 300 + 100;
	this.targetX = this.x;
	this.targetY = this.y;
	this.dirx = 0;
	this.diry = 0;
	//in-game dynamics
	this.health = 100;
	this.coins = 0;
	this.bullets = 0;
	this.medkits = 0;
	this.type = Math.floor(Math.random() * 4); //TODO random between 1-4


	//update and drawing functions
	Player.prototype.update = function update() {
		this.targetX += this.dirx * 3;
		this.targetY += this.diry * 3;
		this.x = this.x + (this.targetX - this.x) * 0.50;
		this.y = this.y + (this.targetY - this.y) * 0.50;
	}
};


var Game = function Game() {

	console.log('init');
	this.players = [];



	Game.prototype.addPlayer = function addPlayer(id) {
		this.players.push(new Player(this, id));
	}

	Game.prototype.update = function update() {
		for (var m = 0; m < this.players.length; m++) {
			const player = this.players[m];
			player.update();
		}
	}
};

var game = new Game();
const interval = setInterval(() => {
	game.update();
}, 1000 / 60)


const updateInterval = setInterval(() => {
	io.sockets.emit('PLAYERS_UPDATE', game.players.map(player => ({
		id: player.id,
		name: player.name,
		x: player.x, 
		y: player.y, 
		type: player.type })));
}, 1000/30);


io.on('connection', function (socket) {
	console.log('user connected! ' + socket.id);
	game.addPlayer(socket.id);
	console.log('number of players: ' + game.players.length);
	// socket.on('my other event', function (data) {
	//   console.log(data);S
	// });

	socket.on('disconnect', function () {
		//clearInterval(playerInterval);
		//socket.emit('disconnected');
		game.players = game.players.filter(player => player.id !== socket.id);
		// console.log('user disconnected! ' + socket.id);
		// console.log('number of players: ' + game.players.length);
	})

	socket.on('PLAYER_DIRECTION_UPDATE', function (data) {
		const player = game.players = game.players.filter(player => player.id === socket.id);
		// console.log(player[0])
		if(data.dirx !== undefined)
			player[0].dirx = data.dirx;
		if(data.diry !== undefined)
			player[0].diry = data.diry;
	})

	socket.on('PLAYER_NAME_UPDATE', function (data) {
		const player = game.players = game.players.filter(player => player.id === socket.id);
		// console.log(player[0])
		player[0].name = data.name;
	})
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}
